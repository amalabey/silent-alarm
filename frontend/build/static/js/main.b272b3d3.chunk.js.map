{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","alarms","setAlarms","Date","selectedTime","setAlarmTime","apiUrl","fetchData","a","axios","get","response","data","useEffect","className","Grid","container","direction","justifyContent","alignItems","item","xs","utils","DateFnsUtils","margin","id","label","value","onChange","date","KeyboardButtonProps","IconButton","color","onClick","now","formattedDateStr","format","isBefore","add","days","post","then","List","map","alarm","index","alarmTime","time","primaryText","tag","secondaryText","formatRelative","listItemClass","ListItem","ListItemText","primary","secondary","ListItemSecondaryAction","edge","delete","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6ZAyGeA,MAtFf,WACE,MAA4BC,mBAAS,MAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAqCF,mBAAS,IAAIG,MAAlD,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,iBAETC,EAAS,uCAAG,4BAAAC,EAAA,sEACOC,IAAMC,IAAIJ,GADjB,OACVK,EADU,OAEhBT,EAAUS,EAASC,MAFH,2CAAH,qDA4Bf,OAJAC,qBAAU,WACRN,MACC,IAGD,qBAAKO,UAAU,MAAf,SACE,eAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,eAAe,SACfC,WAAW,SAJb,UAKE,eAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,UACE,cAAC,IAAD,CAAyBC,MAAOC,IAAhC,SACE,cAAC,IAAD,CACIT,UAAU,aACVU,OAAO,SACPC,GAAG,cACHC,MAAM,aACNC,MAAOvB,EACPwB,SAtCW,SAACC,GACxBxB,EAAawB,IAsCDC,oBAAqB,CACnB,aAAc,mBAItB,qBAAKhB,UAAU,cAAf,SACE,cAACiB,EAAA,EAAD,CAAYC,MAAM,UAAU,aAAW,eAAeC,QAzC/C,WACf,IAAMC,EAAM,IAAI/B,KAEVgC,EAAmBC,YAAOC,YAASjC,EAAc8B,GAAOI,YAAIlC,EAAc,CAAEmC,KAAM,IAAOnC,EAAc,oBAC7GK,IAAM+B,KAAKlC,EAAQ,CAAC,UAAa6B,IAAmBM,MAAK,WACvDlC,QAoCM,SACE,cAAC,IAAD,WAIN,cAACQ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACE,cAACqB,EAAA,EAAD,UACGzC,GACCA,EAAO0C,KAAI,SAACC,EAAOC,GACjB,IAAMC,EAAY,IAAI3C,KAAKyC,EAAMG,MAC3BC,EAA4B,OAAdJ,EAAMK,IAAeL,EAAMK,IAAMb,YAAOU,EAAW,UACjEI,EAAgBC,YAAeL,EAAW,IAAI3C,MAC9CiD,EAAgBN,EAAY,IAAI3C,KAAS,YAAc,gBAC7D,OACE,eAACkD,EAAA,EAAD,CAAUvC,UAAWsC,EAArB,UACE,cAACE,EAAA,EAAD,CAAcC,QAASP,EAAaQ,UAAWN,IAC/C,cAACO,EAAA,EAAD,UACE,cAAC1B,EAAA,EAAD,CAAY2B,KAAK,MAAM,aAAW,SAASzB,QAAS,kBAjDnDR,EAiDqEmB,EAAMnB,QAhD9FhB,IAAMkD,OAAN,UAAgBrD,EAAhB,YAA0BmB,IAAMgB,MAAK,WACnClC,OAFgB,IAACkB,GAiDD,SACE,cAAC,IAAD,wBChFTmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b272b3d3.chunk.js","sourcesContent":["import axios from 'axios';\nimport 'date-fns';\nimport { format, formatRelative, isBefore, add } from 'date-fns';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker\n} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport IconButton from '@material-ui/core/IconButton';\nimport AlarmAddIcon from '@material-ui/icons/AlarmAdd';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nfunction App() {\n  const [alarms, setAlarms] = useState(null);\n  const [selectedTime, setAlarmTime] = useState(new Date());\n  const apiUrl = \"/api/v1/alarms\";\n\n  const fetchData = async () => {\n    const response = await axios.get(apiUrl)\n    setAlarms(response.data) \n  }\n\n  const handleDateChange = (date) => {\n    setAlarmTime(date);\n  };\n\n  const addAlarm = () => {\n    const now = new Date();\n\n    const formattedDateStr = format(isBefore(selectedTime, now) ? add(selectedTime, { days: 1 }) : selectedTime, \"yyyy-MM-dd HH:mm\")\n    axios.post(apiUrl, {'alarmtime': formattedDateStr}).then(() => {\n      fetchData();\n    });\n  }\n\n  const deleteAlarm = (id) => {\n    axios.delete(`${apiUrl}/${id}`).then(() => {\n      fetchData();\n    });\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"center\">\n        <Grid item xs={12}>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardTimePicker\n                className=\"timePicker\"\n                margin=\"normal\"\n                id=\"time-picker\"\n                label=\"Alarm Time\"\n                value={selectedTime}\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change time',\n                }}\n              />\n          </MuiPickersUtilsProvider>\n          <div className=\"addAlarmBtn\">\n            <IconButton color=\"primary\" aria-label=\"add an alarm\" onClick={addAlarm}>\n              <AlarmAddIcon />\n            </IconButton>\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <List>\n            {alarms &&\n              alarms.map((alarm, index) => {\n                const alarmTime = new Date(alarm.time);\n                const primaryText = alarm.tag !== null ? alarm.tag : format(alarmTime, \"h:mm a\");\n                const secondaryText = formatRelative(alarmTime, new Date());\n                const listItemClass = alarmTime < new Date() ? \"pastAlarm\" : \"upcomingAlarm\";\n                return (\n                  <ListItem className={listItemClass}>\n                    <ListItemText primary={primaryText} secondary={secondaryText} />\n                    <ListItemSecondaryAction>\n                      <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => deleteAlarm(alarm.id)}>\n                        <DeleteIcon />\n                      </IconButton>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                );\n              })}\n          </List>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}